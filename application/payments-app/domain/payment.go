package domain

import (
	"github.com/negarciacamilo/deuna_challenge/application/apierrors"
	"github.com/negarciacamilo/deuna_challenge/application/domain"
	"github.com/negarciacamilo/deuna_challenge/application/logger"
)

type PaymentRequest struct {
	Amount float64 `json:"amount"`
	// This is preloaded in the POS
	MerchantID uint64 `json:"merchant_id"`
	// This is inferred by the card number
	BankID uint64 `json:"bank_id"`
	// This is the hash generated by the POS to avoid sending sensitive information
	CardHash string `json:"card_hash"`
}

func (p *PaymentRequest) Validate(ctx *domain.ContextInformation) apierrors.ApiError {
	err := p.validateBank(ctx)
	if err != nil {
		return err
	}

	err = p.validateAmount(ctx)
	if err != nil {
		return err
	}

	err = p.validateMerchant(ctx)
	if err != nil {
		return err
	}

	err = p.validateCardHash(ctx)
	if err != nil {
		return err
	}

	return nil
}

var validBanksID = map[uint64]string{
	0: "Santander",
	1: "BBVA",
	3: "HSBC",
}

func (p *PaymentRequest) validateBank(ctx *domain.ContextInformation) apierrors.ApiError {
	if _, ok := validBanksID[p.BankID]; !ok {
		apierr := apierrors.NewBadRequestApiError("invalid bank id")
		logger.Error(apierr.Error(), "validate-bank", apierr, ctx, map[string]any{"bank_id": p.BankID})
		return apierr
	}
	return nil
}

func (p *PaymentRequest) validateAmount(ctx *domain.ContextInformation) apierrors.ApiError {
	if p.Amount <= 0 {
		apierr := apierrors.NewBadRequestApiError("invalid amount")
		logger.Error(apierr.Error(), "validate-amount", apierr, ctx, map[string]any{"amount": p.Amount})
		return apierr
	}

	return nil
}

func (p *PaymentRequest) validateMerchant(ctx *domain.ContextInformation) apierrors.ApiError {
	if p.MerchantID == 0 {
		apierr := apierrors.NewBadRequestApiError("invalid merchant id")
		logger.Error(apierr.Error(), "validate-merchant", apierr, ctx, map[string]any{"merchant_id": p.MerchantID})
		return apierr
	}

	return nil
}

func (p *PaymentRequest) validateCardHash(ctx *domain.ContextInformation) apierrors.ApiError {
	if p.CardHash == "" {
		apierr := apierrors.NewBadRequestApiError("invalid card hash")
		logger.Error(apierr.Error(), "validate-card-hash", apierr, ctx, map[string]any{"card_hash": p.CardHash})
		return apierr
	}
	return nil
}
